import urllib.request
import urllib.error
import urllib.parse
import http.client
import http.cookiejar
from bs4 import BeautifulSoup


class Connection:
    @staticmethod
    def verify_host(hostname):
        verified = True
        try:
            urllib.request.urlopen(hostname, timeout=10)
        except urllib.request.URLError:
            verified = False

        return verified

    @staticmethod
    def request(hostname, data, urlencode=False, headers={}, method='GET', encode='utf-8', decode='iso-8859-1'):
        try:
            if urlencode:
                data = urllib.parse.urlencode(eval(data))
            request = urllib.request.Request(hostname, data=data.encode(encode, 'ignore'), headers=headers,
                                             method=method)
            response = urllib.request.urlopen(request, timeout=20)
            data = response.read().decode(decode, 'ignore')
            response.close()

            return data

        except Exception:
            pass

    @staticmethod
    def login(hostname, username, password):
        # Attempt Login
        success = False
        cj = http.cookiejar.CookieJar()
        opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
        url = hostname + '/wp-login.php'
        data = {'log': username, 'pwd': password, 'submit': 'Log In'}
        data = urllib.parse.urlencode(data)
        opener.open(url, data.encode('utf-8'))

        # Verify successful login
        response = opener.open(hostname)
        soup = BeautifulSoup(response)
        atags = soup.find_all('a')
        if atags:
            for atag in atags:
                hrefs = atag.get('href')
                if hostname + '/wp-login.php?action=logout' in hrefs:
                    success = True

        return success

    @staticmethod
    def formathostname(hostname):
        if hostname[:8] == 'https://':
            # ssl not supported yet
            pass
        if hostname[:7] != "http://":
            return 'http://' + hostname

    @staticmethod
    def reset_session():
        cj = http.cookiejar.CookieJar()
        # Clear previous cookies
        cj.clear()
