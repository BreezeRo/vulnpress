import os
import sys
import inspect
import urllib.request
from .validators import *
from exploit.connection import Connection
from db.db import Db
from db.db import Exploit as DBExploit


class Exploit(object):
    exploits = {"found": {}, "not_found": {}}

    def __init__(self, hostname, protocol, username=None, password=None):
        self.db = Db()
        self.connection = Connection()
        self.hostname = protocol + hostname
        self.username = username
        self.password = password
        self.is_logged_in = False
        # Reset the current session
        self.connection.reset_session()

    def exploit(self, type_id=None):
        if self.connection.verify_socket(self.hostname) is False:
            results = {"error": "Could not connect to host."}
        elif self.username and self.password is not None and not self.login(self.hostname, self.username,
                                                                            self.password):
            results = {"error": "Unable to login with the credentials provided."}
        else:
            if type_id is not None:
                for exploit in self.db.get_exploits_by_exploit_type(type_id):
                    self.run_exploit(exploit)

                results = self.get_exploit_results()
            else:
                for exploit_type in self.db.get_exploit_types():
                    for exploit in self.db.get_exploits_by_exploit_type(exploit_type.id):
                        self.run_exploit(exploit)

                results = self.get_exploit_results()

        return results

    def run_exploit(self, exploit: DBExploit):
        if exploit.is_authenticated and not self.is_logged_in:
            pass
        else:
            self.validate_response(
                exploit, self.do_request(exploit, exploit.exploit_body if exploit.exploit_body is not None else '')
            )

    def validate_response(self, exploit: DBExploit, response):
        if self.get_validator_by_id(exploit.validator_id).validate(response):
            self.exploit_found(self.get_exploit_info(exploit))
        else:
            self.exploit_not_found(self.get_exploit_info(exploit))

    def do_request(self, exploit: DBExploit, data):
        url = self.hostname + exploit.exploit_url
        if self.verify_url(url) is None:
            return None

        return self.connection.request(hostname=url, data=data,
                                       headers=eval(
                                           exploit.exploit_headers) if exploit.exploit_headers is not None else {},
                                       method=exploit.request_method,
                                       urlencode=exploit.is_url_encode)

    @staticmethod
    def verify_url(hostname):
        try:
            urllib.request.urlopen(hostname, timeout=10)
        except urllib.request.URLError:
            return None

    def exploit_found(self, exploit_info):
        self.exploits["found"][str(exploit_info['exploit_id'])] = {
            "name": exploit_info['exploit_name'],
            "version": exploit_info['exploit_version'],
            "exploiturl": exploit_info['exploit_url']
        }

    def exploit_not_found(self, exploit_info):
        self.exploits["not_found"][str(exploit_info['exploit_id'])] = {
            "name": exploit_info['exploit_name'],
            "version": exploit_info['exploit_version'],
            "exploiturl": exploit_info['exploit_url']
        }

    def login(self, hostname, username, password):
        self.is_logged_in = self.connection.login(hostname, username, password)

        return self.is_logged_in

    def get_exploit_results(self):
        exploits = self.exploits
        self.exploits = {"found": {}, "not_found": {}}

        return exploits

    @staticmethod
    def check_file(file):
        if not os.path.isfile(file) and not os.access(file, os.R_OK):
            print('[X] ' + file + ' file is missing or not readable')
            sys.exit(1)
        else:
            return file

    @staticmethod
    def get_validator_by_id(validator_id):
        attribute = '__validator_id__'
        for name, obj in inspect.getmembers(sys.modules[__name__]):
            if hasattr(obj, attribute) and getattr(obj, attribute) == validator_id:
                return obj()
        raise ValueError('Could not find Validator with validator id %d' % validator_id)

    @staticmethod
    def get_exploit_info(exploit: DBExploit):
        return {
            'exploit_id': exploit.id,
            'exploit_name': exploit.name,
            'exploit_version': exploit.version,
            'exploit_url': exploit.url
        }
