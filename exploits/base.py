import abc
import urllib.request
import urllib.error
import http.client


class Base(object):
	__metaclass__ = abc.ABCMeta

	@staticmethod
	@abc.abstractmethod
	def getname():
		raise NotImplementedError

	@staticmethod
	@abc.abstractmethod
	def getversion():
		raise NotImplementedError

	@staticmethod
	@abc.abstractmethod
	def getexploiturl():
		raise NotImplementedError

	@abc.abstractmethod
	def exploit(self):
		raise NotImplementedError

	@staticmethod
	def exploitfound(name, version, exploiturl):
		print(name + " " + version + " is vulnerable with exploit: \r\n" + exploiturl + '\r\n')

	@staticmethod
	def exploitnotfound(name, version):
		print(name + " " + version + " is not vulnerable" + '\r\n')

	@staticmethod
	def request(hostname, data='', headers={}, method='GET', encode='utf-8', decode='iso-8859-1'):
		try:
			request = urllib.request.Request(hostname, data=data.encode(encode, 'ignore'), headers=headers, method=method)
			response = urllib.request.urlopen(request)

			return response.read().decode(decode, 'ignore')

		except http.client.BadStatusLine:
				print('Bad status line received from server. Exploit failed.')
		except urllib.request.HTTPError:
				print('HTTP error received from server. Exploit failed.')
		except urllib.request.URLError:
				print('URL error received from server. Exploit failed.')